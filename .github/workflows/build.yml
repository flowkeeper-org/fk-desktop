name: Build binaries

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        compiler: [nuitka, pyinstaller]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MAC_SIGN_CERT }}
          P12_PASSWORD: ${{ secrets.MAC_SIGN_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.MAC_KEYCHAIN_PASSWORD }}
        shell: bash
        run: |
          export FK_VERSION=$(build/common/get-version.sh)
          if [[ "$OSTYPE" == "darwin"* ]]; then
            build/macos/install-create-dmg.sh
            build/macos/install-certificates.sh
          elif [[ "$OSTYPE" == "msys" ]]; then
            build/windows/install-innosetup.sh
          else:
            build/linux/appimage/install-appimage.sh
          fi
          pip install -r requirements-build.txt

      - name: Prepare sources
        shell: bash
        run: |
          build/common/generate-resources.sh

      - name: Package builds (PyInstaller)
        if: ${{ matrix.compiler == 'pyinstaller' }}
        shell: bash
        run: |
          if [[ "$OSTYPE" == "darwin"* ]]; then
            pyinstaller installer/normal-build.spec -- --sign
          else
            pyinstaller installer/portable-build.spec
            pyinstaller installer/normal-build.spec
          fi
          rm -rf build
          mkdir -p build/flowkeeper
          mv dist/flowkeeper/Flowkeeper* build/flowkeeper
          mv dist/flowkeeper/_internal build/flowkeeper/_internal

      - name: Package builds (Nuitka)
        if: ${{ matrix.compiler == 'nuitka' }}
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          script-name: src/fk/desktop/Flowkeeper.py
          mode: onefile
          enable-plugins: pyside6
          windows-console-mode: disable
          windows-icon-from-ico: res/flowkeeper.ico
          macos-app-icon: res/flowkeeper.icns
          macos-signed-app-name: org.flowkeeper.desktop
          macos-app-version: "0.10.0"
          macos-app-name: Flowkeeper
          macos-sign-identity: "Developer ID Application: Constantine Kulak (ELWZ9S676C)"
          product-name: Flowkeeper
          product-version: "0.10.0"
          file-description: Flowkeeper is a Pomodoro Technique desktop timer for power users
          copyright: Copyright (c) 2023 Constantine Kulak <contact@flowkeeper.org>
        env:
          PYTHONPATH: src

      - name: Create installers
        env:
          NOTARIZATION_PASSWORD: ${{ secrets.MAC_NOTARIZATION_PASSWORD }}
          NOTARIZATION_ID: ${{ secrets.MAC_NOTARIZATION_ID }}
          NOTARIZATION_TEAM: ${{ secrets.MAC_NOTARIZATION_TEAM }}
        shell: bash
        run: |
          if [[ "$OSTYPE" == "darwin"* ]]; then
            build/macos/create-dmg.sh
            build/macos/notarize-dmg.sh
          elif [[ "$OSTYPE" == "msys" ]]; then
            build/windows/package-installer.sh
          else
            build/linux/debian/package-deb.sh
            build/linux/appimage/package-appimage.sh
          fi

      - name: Archive portable single-file build
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-${{ matrix.compiler }}-single
          path: |
            build/Flowkeeper.*

      - name: Archive portable build ZIP
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-${{ matrix.compiler }}-zip
          path: |
            build/Flowkeeper.dist

      - name: Archive installers
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-${{ matrix.compiler }}-installers
          path: |
            dist
